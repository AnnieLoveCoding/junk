My solution to problem 1:
package netsuite;

import java.util.Arrays;
import java.util.Iterator;

public class Problem1 {

	/**
	 * When I read the problem A first, I thought you want a new array to be allocated 
	 */
    static int[] removeDuplicates(int[] values)
    {	
    	if (null == values) {
    		return null;
    	}
        int [] result = new int[values.length];
        int count = 0;
        for (int i=0;i<values.length;i++) {
        	result[count] = values[i];
        	if (i == 0 || result[count-1] != result[count]) {
        		count++;
        	}
        }
        
        return Arrays.copyOf(result, count);
    }

    /**
     * After I read your problem B, it seems that you want me to modify the input array
     * directly, so now I give you the implementation that does that.
     */
    static int[] removeDuplicatesWithoutNewArray(int[] values)
    {	
    	if (null == values) {
    		return null;
    	}
        int insertLocation = 0;
        for (int i=0;i<values.length;i++) {
        	values[insertLocation] = values[i];
        	if (i == 0 || values[insertLocation-1] != values[insertLocation]) {
        		insertLocation++;
        	}
        }
        while (insertLocation < values.length) {
        	values[insertLocation++] = 0;
        }
        return values;
    }

    
    static class UniqueIterator<E> implements Iterator<E> {
    	
    	E[] array;
    	int currentIndex;

    	UniqueIterator(E[] array) {
    		this.array = array;
    	}

		@Override
		public boolean hasNext() {			
			return currentIndex < array.length;
		}

		@Override
		public E next() {
			E result = array[currentIndex];
			while (currentIndex < array.length) {
				if (result == null && array[currentIndex] != null) {
					break;
				} else if (result != null && !result.equals(array[currentIndex])) {
					break;
				}
				currentIndex++;
			}
			return result;
		}

		@Override
		public void remove() {
			throw new RuntimeException("Unimplemented function");
		}
    	
    }
    public static void main(String[] args) {
		print(removeDuplicatesWithoutNewArray(new int[] {}));
		print(removeDuplicatesWithoutNewArray(new int[] {1}));
		print(removeDuplicates(new int[] {1, 2, 3, 3, 3, 4, 4, 10, 13, 15, 15, 17}));
		print(removeDuplicatesWithoutNewArray(new int[] {1, 2, 3, 3, 3, 4, 4, 10, 13, 15, 15, 17}));
		print(removeDuplicatesWithoutNewArray(new int[] {1, 1}));
		
		UniqueIterator<Integer> ui = new UniqueIterator<Integer>(new Integer[] {1, 2, 3, 3, 3, 4, 4, 10, 13, 15, 15, 17});
		while (ui.hasNext())
			System.out.print(ui.next()+" ");
		System.out.println();
	}

	private static void print(int[] removeDuplicates) {
		for (int i : removeDuplicates) {
			System.out.print(i+" ");
		}
		System.out.println();
	}
    
}



Solution to problem 2:
public class Problem2 {

	static double square_root(double a, double epsilon) {
		if (Math.abs(a) < epsilon)
			return 0;

		double x = 1.5; 
		
		while (true) {
			if (Math.abs(x*x - a) < epsilon)
				return x;
			double y = a/x;
			x = (x+y)/2;
		}
		
	}
	
	public static void main(String[] args) {
		System.out.println(square_root(2, 1e-6));
	}
	
}



--------------------------------------------------------------------------------
QUESTION 1

Given a sorted array of integers, write a method to remove the duplicates.  Do
not use any classes from the java.util package, or the equivalent library for
your language.

Example: [ 1, 2, 3, 3, 3, 4, 4, 10, 13, 15, 15, 17 ] ->
         [ 1, 2, 3, 4, 10, 13, 15, 17 ]

A) Solution template:

    int[] removeDuplicates(int[] values)
    {
        // your code here
    }

   Questions (answer these):
   1. Did you write that as if you were writing production code?
	Yes I wrote it as if I were writing production code.
   2. What assumptions does your implementation make about the input parameter?
	I assume the input has the integers sorted already, the output array is a new allocated array.
   3. What is removeDuplicates(x).length, in your implementation?
	The length for the above input for my first implementation is 8. I gave you a 2nd implementation after
	reading problem B. That one will return the original input array, with the duplicate removed out, 
	and zero out the remaining elements, and have same length with the original input array.
   4. Are you using all the information you have about the input array?
	Yes I am using all the information I have about the input array.
   5. What is the algorithmic complexity ("big O") of your function?
	The algorithmic complexity is n where n is the length of the input array.

B) Now implement your solution to A as a Java iterator that does not modify the source
   array, and returns only unique elements.  Write a concrete subclass of the
   interface java.util.Iterator; the interface is included below for convenience
   (see http://download-llnw.oracle.com/javase/6/docs/api/java/util/Iterator.html).
   You do not need to implement the optional remove() method.

   (For other languages, implement a generator or other equivalent construct.)

   Do not "cheat" by calling the removeDuplicates() you defined above. One benefit
   of iterators is that they can operate incrementally -- make your iterator
   only do the minimum work it needs to in each call to hasNext() or next().

    public interface Iterator<E>
    {
        /** Returns true if the iteration has more elements. */
        boolean hasNext();

        /** Returns the next element in the iteration. */
        E next();

        /** Removes from the underlying collection the last element returned by
            the iterator (optional operation). */
        void remove();
    }

   Questions (answer these):
   6. Does your implementation work for generic objects, numbers, or integers?
	Yes it works for generic object, numbers and integers. For generic objects,
	the class must implement equals method.
   7. If it does not work with objects, what would be required to make it work
      for generic objects?
	The equals method must be implemented for duplicate removal.   

--------------------------------------------------------------------------------
QUESTION 2

Given a non-negative real number a, its square root is a number x, such that x * x = a.
One way to compute a square root is via successive approximation, where one estimate
yields a better estimate.

For example, let's say you are trying to find the square root of 2, and you have
an estimate of 1.5. We'll say a = 2, and x = 1.5. To compute a better estimate,
we'll divide a by x. This gives a new value y = 1.333333... However, we can't just
take this as our next estimate (why not?). We need to average it with the previous
estimate. So our next estimate, xx will be (x + y) / 2, or 1.416666...

A) Write a function that takes a non-negative real number a, and an epsilon (a
   small real number), and returns an approximation of the square root of a.

    double square_root(double a, double epsilon) ...

   Epsilon determines how accurate the approximation needs to be. The function
   should return the first approximation x it obtains that satisfies abs(x*x - a) < epsilon,
   where abs(x) is the absolute value of x.

   Questions (answer these):
   1. Why can't the next estimate, xx, be computed as a / x, where x is the
      previous estimate?
	if the next estimate is xx = a/x
	then the next estimate after that is a/xx which is a/(a/x) = x, so
	you'll be flipping back to your previous estimate and will never reduce
	your error, i.e:
		a = 2, x = 1.5
		iteration1:
			previous estimate = 1.5
			next estimate = 2/1.5 = 1.3333
		iteration2:
			previous estimate = 1.3333
			next estimate = 2/1.333333 = 1.5
   2. What happens, in your implementation, if a = 0?
	It returns 0
   3. What value does your program give for square_root(2, 1e-6)?
	1.4142135623746899


--------------------------------------------------------------------------------
QUESTION 3

You are given two database tables, EMPLOYEES and BONUS, with the following
schema.  Data shown below should be considered example data; the actual table
will contain other data.

   EMPLOYEES                                       BONUS
   __________________________________________      _____________
   EMPID  NAME  SUPERVISOR  LOCATION   SALARY      EMPID  NBONUS
   ------------------------------------------      -------------
      34  Amy               NY         110000         17    5000
      17  Ben           34  TN          75000         10    2000
       5  Chris         34  TN          80000         34    5000
      10  Don            5  HI         100000      ...
   ...

A) Write a SQL statement to return the employee's name, supervisor's name and
   bonus of everyone who got a bonus greater than 1000.

mysql flavor:
	select e.name as 'employee_name',b.nbonus as 'bonus',es.name as 'supervisor_name'
	from employees e
	left outer join employees es on e.supervisor = es.empid
	left outer join bonus b on e.empid = b.empid
	where b.nbonus > 1000


B) Write a SQL statement to list the highest paid employee in each location.
   Ranking should be based on salary plus bonus.  Output should include employee
   name, salary, bonus, and total pay (salary plus bonus).
# i had to create sub query, first i pull out the maximum salary for each location:
# then i select every employee that match that location and total salary
select e.name as 'employee_name',
	e.salary as 'salary',
	b.nbonus as 'bonus',
	e.salary+ifnull(b.nbonus,0) as 'total_pay'
from employees e left outer join bonus b on e.empid = b.empid 
	where (location,e.salary+ifnull(b.nbonus,0)) in (
	select e.location, max(e.salary+ifnull(b.nbonus,0))
	from employees e
	left outer join bonus b on e.empid = b.empid
	group by location
)

# add test rows
insert into employees (empid,name,supervisor,location,salary)
values (6,'This employee does not show up in Tennese top salary',34,'TN',60000);
insert into employees (empid,name,supervisor,location,salary)
values (100,'Michael',null,'CA',120000);
insert into employees (empid,name,supervisor,location,salary)
values (101,'Edwin',null,'CA',130000);

# mysql output:
mysql> select e.name as 'employee_name',
    -> e.salary as 'salary',
    -> b.nbonus as 'bonus',
    -> e.salary+ifnull(b.nbonus,0) as 'total_pay'
    -> from employees e left outer join bonus b on e.empid = b.empid 
    -> where (location,e.salary+ifnull(b.nbonus,0)) in (
    -> select e.location, max(e.salary+ifnull(b.nbonus,0))
    -> from employees e
    -> left outer join bonus b on e.empid = b.empid
    -> group by location
    -> )
    -> ;
+---------------+--------+-------+-----------+
| employee_name | salary | bonus | total_pay |
+---------------+--------+-------+-----------+
| Amy           | 110000 |  5000 |    115000 |
| Ben           |  75000 |  5000 |     80000 |
| Chris         |  80000 |  NULL |     80000 |
| Don           | 100000 |  2000 |    102000 |
| Edwin         | 130000 |  NULL |    130000 |
+---------------+--------+-------+-----------+


C) Given a NEW_SUPERVISOR table (columns: EMPID, SUPERVISOR), write an update
   statement that updates the supervisor of each employee with a new supervisor.
   The NEW_SUPERVISOR table is an incremental update, so employees not listed in
   the table must retain their existing supervisor.

# use update and left outer join and ifnull
update employees e 
left outer join new_supervisor ns on e.empid = ns.empid 
set e.supervisor = ifnull(ns.supervisor,e.supervisor);


--------------------------------------------------------------------------------
